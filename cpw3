current account

package courseProject;

public class Account {
    private String accountNumber; // Max 5 characters
    private String accountType; // CHK or SAV
    private double serviceFee; // Range 0.00 to 10.00
    private double interestRate; // Range 0.0 to 10.0 percent
    private double overdraftFee; // Positive value
    private double balance = 0.0; // Initial balance is zero

    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        if (accountNumber.length() > 5) {
            throw new IllegalArgumentException("Account Number must be 5 characters or fewer.");
        }
        this.accountNumber = accountNumber;
    }

    public String getAccountType() {
        return accountType;
    }

    public void setAccountType(String accountType) {
        if (!accountType.equalsIgnoreCase("CHK") && !accountType.equalsIgnoreCase("SAV")) {
            throw new IllegalArgumentException("Account Type must be 'CHK' or 'SAV'.");
        }
        this.accountType = accountType;
    }

    public double getServiceFee() {
        return serviceFee;
    }

    public void setServiceFee(double serviceFee) {
        if (serviceFee < 0.0 || serviceFee > 10.0) {
            throw new IllegalArgumentException("Service Fee must be between 0.00 and 10.00.");
        }
        this.serviceFee = serviceFee;
    }

    public double getInterestRate() {
        return interestRate;
    }

    public void setInterestRate(double interestRate) {
        if (interestRate < 0.0 || interestRate > 10.0) {
            throw new IllegalArgumentException("Interest Rate must be between 0.0 and 10.0 percent.");
        }
        this.interestRate = interestRate;
    }

    public double getOverdraftFee() {
        return overdraftFee;
    }

    public void setOverdraftFee(double overdraftFee) {
        if (overdraftFee < 0.0) {
            throw new IllegalArgumentException("Overdraft Fee must be a positive value.");
        }
        this.overdraftFee = overdraftFee;
    }

    public double getBalance() {
        return balance;
    }

    // Add a formatted string for account details
    @Override
    public String toString() {
        return String.format(
            "Account Number: %s\nAccount Type: %s\nService Fee: %.2f\nInterest Rate: %.2f%%\nOverdraft Fee: %.2f\nBalance: %.2f\n",
            accountNumber, accountType, serviceFee, interestRate, overdraftFee, balance
        );
    }
}


current bankaccount

package courseProject;

import java.util.ArrayList;
import java.util.List;

public class BankAcctApp {
    public static void main(String[] args) throws NumberFormatException {
        List<Customer> customers = new ArrayList<>();
        String continueEntry;

        System.out.println("Bank Account Application - Data Entry");

        do {
            Customer customer = new Customer();
            Account account = new Account();

            // Input customer details
            while (true) {
                try {
                    customer.setCustomerID(DataEntry.inputString("Enter Customer ID (Max 5 characters): ", 5));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setSSN(DataEntry.inputNumericString("Enter SSN (9 digits): ", 9));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setLastName(DataEntry.inputString("Enter Last Name (Max 20 characters): ", 20));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setFirstName(DataEntry.inputString("Enter First Name (Max 15 characters): ", 15));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setStreet(DataEntry.inputString("Enter Street (Max 20 characters): ", 20));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setCity(DataEntry.inputString("Enter City (Max 20 characters): ", 20));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setState(DataEntry.inputString("Enter State (2 characters): ", 2));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setZip(DataEntry.inputNumericString("Enter Zip Code (5 digits): ", 5));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setPhone(DataEntry.inputNumericString("Enter Phone Number (10 digits): ", 10));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            // Input account details
            while (true) {
                try {
                    account.setAccountNumber(DataEntry.inputString("Enter Account Number (Max 5 characters): ", 5));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    account.setAccountType(DataEntry.inputString("Enter Account Type (CHK/SAV): "));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    account.setServiceFee(Double.parseDouble(DataEntry.inputString("Enter Service Fee (0.00 - 10.00): ")));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println("Invalid input for Service Fee. Must be a number between 0.00 and 10.00.");
                }
            }

            while (true) {
                try {
                    account.setInterestRate(Double.parseDouble(DataEntry.inputString("Enter Interest Rate (0.0 - 10.0): ")));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println("Invalid input for Interest Rate. Must be a number between 0.0 and 10.0.");
                }
            }

            while (true) {
                try {
                    account.setOverdraftFee(Double.parseDouble(DataEntry.inputString("Enter Overdraft Fee: ")));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println("Invalid input for Overdraft Fee. Must be a positive number.");
                }
            }

            // Add customer and account to list
            customers.add(customer);

            System.out.print("Do you want to enter another customer? (yes/no): ");
            continueEntry = DataEntry.inputString("");
        } while (continueEntry.equalsIgnoreCase("yes"));

        // Display all customers and their accounts
        System.out.println("\nCustomer and Account Information:");
        System.out.println("-------------------------------------------------");
        for (Customer cust : customers) {
            System.out.println(cust);
            System.out.println("-------------------------------------------------");
        }
    }
}





update bankaccount -

package courseProject;

import java.util.Scanner;

public class BankAcctApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Create two customers
        System.out.println("Enter details for Customer 1 (Checking Account):");
        Customer customer1 = createCustomer();
        CheckingAccount checkingAccount = new CheckingAccount();
        setupAccount(scanner, checkingAccount);

        System.out.println("Enter details for Customer 2 (Savings Account):");
        Customer customer2 = createCustomer();
        SavingsAccount savingsAccount = new SavingsAccount();
        setupAccount(scanner, savingsAccount);

        // Perform transactions
        System.out.println("\n--- Transactions for Checking Account ---");
        performTransactions(checkingAccount);

        System.out.println("\n--- Transactions for Savings Account ---");
        performTransactions(savingsAccount);
    }

    private static Customer createCustomer() {
        Customer customer = new Customer();
        customer.setCustomerID(DataEntry.inputString("Enter Customer ID (Max 5 characters): ", 5));
        customer.setSSN(DataEntry.inputNumericString("Enter SSN (9 digits): ", 9));
        customer.setLastName(DataEntry.inputString("Enter Last Name (Max 20 characters): ", 20));
        customer.setFirstName(DataEntry.inputString("Enter First Name (Max 15 characters): ", 15));
        customer.setStreet(DataEntry.inputString("Enter Street (Max 20 characters): ", 20));
        customer.setCity(DataEntry.inputString("Enter City (Max 20 characters): ", 20));
        customer.setState(DataEntry.inputString("Enter State (2 characters): ", 2));
        customer.setZip(DataEntry.inputNumericString("Enter Zip Code (5 digits): ", 5));
        customer.setPhone(DataEntry.inputNumericString("Enter Phone Number (10 digits): ", 10));
        return customer;
    }

    private static void setupAccount(Scanner scanner, Account account) {
        while (true) {
            try {
                account.setAccountNumber(DataEntry.inputString("Enter Account Number (Max 5 characters): ", 5));
                account.setAccountType(account instanceof CheckingAccount ? "CHK" : "SAV");
                break;
            } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    private static void performTransactions(Account account) {
        account.deposit(1000);
        account.withdraw(500);
        try {
            account.withdraw(501);
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
        account.deposit(500);
        account.addInterest();
    }
}

====
add SavingAccount

package courseProject;

public class SavingsAccount extends Account {
    private static final double SERVICE_FEE = 0.25;

    @Override
    public void deposit(double amount) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Deposit amount must be greater than zero.");
        }
        balance += amount - SERVICE_FEE;
        System.out.println(String.format("Deposit of %.2f made. Service fee of %.2f applied. New balance: %.2f", amount, SERVICE_FEE, balance));
    }

    @Override
    public void withdraw(double amount) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Withdrawal amount must be greater than zero.");
        }
        if (amount + SERVICE_FEE > balance) {
            throw new IllegalArgumentException("Insufficient funds. Savings account cannot have a negative balance.");
        }
        balance -= amount + SERVICE_FEE;
        System.out.println(String.format("Withdrawal of %.2f made. Service fee of %.2f applied. New balance: %.2f", amount, SERVICE_FEE, balance));
    }

    @Override
    public void addInterest() {
        balance += balance * SAVINGS_INTEREST_RATE;
        System.out.println(String.format("Interest added at %.2f%%. New balance: %.2f", SAVINGS_INTEREST_RATE * 100, balance));
    }
}

======
add CheckingAccount

package courseProject;

public class CheckingAccount extends Account {
    private static final double SERVICE_FEE = 0.50;
    private static final double OVERDRAFT_FEE = 30.00;

    @Override
    public void deposit(double amount) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Deposit amount must be greater than zero.");
        }
        balance += amount - SERVICE_FEE;
        System.out.println(String.format("Deposit of %.2f made. Service fee of %.2f applied. New balance: %.2f", amount, SERVICE_FEE, balance));
    }

    @Override
    public void withdraw(double amount) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Withdrawal amount must be greater than zero.");
        }
        balance -= amount + SERVICE_FEE;
        if (balance < 0) {
            balance -= OVERDRAFT_FEE;
            System.out.println(String.format("Withdrawal of %.2f made. Service fee of %.2f and overdraft fee of %.2f applied. New balance: %.2f", amount, SERVICE_FEE, OVERDRAFT_FEE, balance));
        } else {
            System.out.println(String.format("Withdrawal of %.2f made. Service fee of %.2f applied. New balance: %.2f", amount, SERVICE_FEE, balance));
        }
    }

    @Override
    public void addInterest() {
        balance += balance * CHECKING_INTEREST_RATE;
        System.out.println(String.format("Interest added at %.2f%%. New balance: %.2f", CHECKING_INTEREST_RATE * 100, balance));
    }
}

=====
update account

package courseProject;

public abstract class Account {
    private String accountNumber; // Max 5 characters
    private String accountType; // CHK or SAV
    protected double balance = 0.0; // Initial balance is zero
    protected static final double CHECKING_INTEREST_RATE = 0.02;
    protected static final double SAVINGS_INTEREST_RATE = 0.05;

    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        if (accountNumber.length() > 5) {
            throw new IllegalArgumentException("Account Number must be 5 characters or fewer.");
        }
        this.accountNumber = accountNumber;
    }

    public String getAccountType() {
        return accountType;
    }

    public void setAccountType(String accountType) {
        if (!accountType.equalsIgnoreCase("CHK") && !accountType.equalsIgnoreCase("SAV")) {
            throw new IllegalArgumentException("Account Type must be 'CHK' or 'SAV'.");
        }
        this.accountType = accountType;
    }

    public double getBalance() {
        return balance;
    }

    // Abstract methods
    public abstract void deposit(double amount);

    public abstract void withdraw(double amount);

    // Add interest
    public abstract void addInterest();
}



phase 3
======
package courseProject;

import java.util.ArrayList;
import java.util.List;

public class BankAcctApp {
    public static void main(String[] args) {
        List<Customer> customers = new ArrayList<>();
        String continueEntry;

        System.out.println("Bank Account Application - Data Entry");

        do {
            Customer customer = new Customer();
            Account account = new Account();

            // Input customer details
            while (true) {
                try {
                    customer.setCustomerID(DataEntry.inputString("Enter Customer ID (Max 5 characters): ", 5));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setSSN(DataEntry.inputNumericString("Enter SSN (9 digits): ", 9));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setLastName(DataEntry.inputString("Enter Last Name (Max 20 characters): ", 20));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setFirstName(DataEntry.inputString("Enter First Name (Max 15 characters): ", 15));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setStreet(DataEntry.inputString("Enter Street (Max 20 characters): ", 20));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setCity(DataEntry.inputString("Enter City (Max 20 characters): ", 20));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setState(DataEntry.inputString("Enter State (2 characters): ", 2));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setZip(DataEntry.inputNumericString("Enter Zip Code (5 digits): ", 5));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    customer.setPhone(DataEntry.inputNumericString("Enter Phone Number (10 digits): ", 10));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            // Input account details
            while (true) {
                try {
                    account.setAccountNumber(DataEntry.inputString("Enter Account Number (Max 5 characters): ", 5));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    account.setAccountType(DataEntry.inputString("Enter Account Type (CHK/SAV): "));
                    break;
                } catch (IllegalArgumentException e) {
                    System.out.println(e.getMessage());
                }
            }

            while (true) {
                try {
                    account.setServiceFee(Double.parseDouble(DataEntry.inputString("Enter Service Fee (0.00 - 10.00): ")));
                    break;
                } catch (IllegalArgumentException | NumberFormatException e) {
                    System.out.println("Invalid input for Service Fee. Must be a number between 0.00 and 10.00.");
                }
            }

            while (true) {
                try {
                    account.setInterestRate(Double.parseDouble(DataEntry.inputString("Enter Interest Rate (0.0 - 10.0): ")));
                    break;
                } catch (IllegalArgumentException | NumberFormatException e) {
                    System.out.println("Invalid input for Interest Rate. Must be a number between 0.0 and 10.0.");
                }
            }

            while (true) {
                try {
                    account.setOverdraftFee(Double.parseDouble(DataEntry.inputString("Enter Overdraft Fee: ")));
                    break;
                } catch (IllegalArgumentException | NumberFormatException e) {
                    System.out.println("Invalid input for Overdraft Fee. Must be a positive number.");
                }
            }

            // Add customer and account to list
            customers.add(customer);

            System.out.print("Do you want to enter another customer? (yes/no): ");
            continueEntry = DataEntry.inputString("");
        } while (continueEntry.equalsIgnoreCase("yes"));

        // Display all customers and their accounts
        System.out.println("\nCustomer and Account Information:");
        System.out.println("-------------------------------------------------");
        for (Customer cust : customers) {
            System.out.println(cust);
            System.out.println("-------------------------------------------------");
        }
    }
}
-----
package courseProject;

public class Account {
    private String accountNumber; // Max 5 characters
    private String accountType; // CHK or SAV
    private double serviceFee; // Range 0.00 to 10.00
    private double interestRate; // Range 0.0 to 10.0 percent
    private double overdraftFee; // Positive value
    private double balance = 0.0; // Initial balance is zero

    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        if (accountNumber.length() > 5) {
            throw new IllegalArgumentException("Account Number must be 5 characters or fewer.");
        }
        this.accountNumber = accountNumber;
    }

    public String getAccountType() {
        return accountType;
    }

    public void setAccountType(String accountType) {
        if (!accountType.equalsIgnoreCase("CHK") && !accountType.equalsIgnoreCase("SAV")) {
            throw new IllegalArgumentException("Account Type must be 'CHK' or 'SAV'.");
        }
        this.accountType = accountType;
    }

    public double getServiceFee() {
        return serviceFee;
    }

    public void setServiceFee(double serviceFee) {
        if (serviceFee < 0.0 || serviceFee > 10.0) {
            throw new IllegalArgumentException("Service Fee must be between 0.00 and 10.00.");
        }
        this.serviceFee = serviceFee;
    }

    public double getInterestRate() {
        return interestRate;
    }

    public void setInterestRate(double interestRate) {
        if (interestRate < 0.0 || interestRate > 10.0) {
            throw new IllegalArgumentException("Interest Rate must be between 0.0 and 10.0 percent.");
        }
        this.interestRate = interestRate;
    }

    public double getOverdraftFee() {
        return overdraftFee;
    }

    public void setOverdraftFee(double overdraftFee) {
        if (overdraftFee < 0.0) {
            throw new IllegalArgumentException("Overdraft Fee must be a positive value.");
        }
        this.overdraftFee = overdraftFee;
    }

    public double getBalance() {
        return balance;
    }

    // Add a formatted string for account details
    @Override
    public String toString() {
        return String.format(
            "Account Number: %s\nAccount Type: %s\nService Fee: %.2f\nInterest Rate: %.2f%%\nOverdraft Fee: %.2f\nBalance: %.2f\n",
            accountNumber, accountType, serviceFee, interestRate, overdraftFee, balance
        );
    }
}



Phase 2 ^^
=======

package courseProject;

import java.util.Scanner;

public class DataEntry {
    private static Scanner scanner = new Scanner(System.in);

    // Method for string entry with no limit
    public static String inputString(String prompt) {
        System.out.print(prompt);
        return scanner.nextLine();
    }

    // Method for string entry with length limit
    public static String inputString(String prompt, int maxLength) {
        String input;
        do {
            System.out.print(prompt);
            input = scanner.nextLine();
        } while (input.isEmpty() || input.length() > maxLength);
        return input;
    }

    // Method for numeric string entry
    public static String inputNumericString(String prompt, int length) {
        String input;
        do {
            System.out.print(prompt);
            input = scanner.nextLine();
        } while (input.length() != length || !input.matches("\\d+"));
        return input;
    }
}
------------
package courseProject;

public class Customer {
    // Data fields
    private String customerID;
    private String ssn;
    private String lastName;
    private String firstName;
    private String street;
    private String city;
    private String state;
    private String zip;
    private String phone;

    // Constructor
    public Customer() {}

    // Getter and Setter methods with validation
    public String getCustomerID() { return customerID; }
    public void setCustomerID(String customerID) { this.customerID = customerID; }

    public String getSSN() { return ssn; }
    public void setSSN(String ssn) { this.ssn = ssn; }

    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }

    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }

    public String getStreet() { return street; }
    public void setStreet(String street) { this.street = street; }

    public String getCity() { return city; }
    public void setCity(String city) { this.city = city; }

    public String getState() { return state; }
    public void setState(String state) { this.state = state; }

    public String getZip() { return zip; }
    public void setZip(String zip) { this.zip = zip; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    // toString method for formatted customer output
    @Override
    public String toString() {
        return String.format(
            "Customer ID: %s\nSSN: %s\nName: %s %s\nAddress: %s, %s, %s %s\nPhone: %s\n",
            customerID, ssn, firstName, lastName, street, city, state, zip, phone
        );
    }
}

-----------
package courseProject;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class BankAcctApp {
    public static void main(String[] args) {
        List<Customer> customers = new ArrayList<>();
        String continueEntry;
        
        System.out.println("Bank Account Application - Data Entry");

        do {
            Customer customer = new Customer();
            customer.setCustomerID(DataEntry.inputString("Enter Customer ID (Max 5 characters): ", 5));
            customer.setSSN(DataEntry.inputNumericString("Enter SSN (9 digits): ", 9));
            customer.setLastName(DataEntry.inputString("Enter Last Name (Max 20 characters): ", 20));
            customer.setFirstName(DataEntry.inputString("Enter First Name (Max 15 characters): ", 15));
            customer.setStreet(DataEntry.inputString("Enter Street (Max 20 characters): ", 20));
            customer.setCity(DataEntry.inputString("Enter City (Max 20 characters): ", 20));
            customer.setState(DataEntry.inputString("Enter State (2 characters): ", 2));
            customer.setZip(DataEntry.inputNumericString("Enter Zip Code (5 digits): ", 5));
            customer.setPhone(DataEntry.inputNumericString("Enter Phone Number (10 digits): ", 10));

            customers.add(customer);

            System.out.print("Do you want to enter another customer? (yes/no): ");
            continueEntry = new Scanner(System.in).nextLine();
        } while (continueEntry.equalsIgnoreCase("yes"));

        // Display all customers' information
        System.out.println("\nCustomer Information:");
        System.out.println("-------------------------------------------------");
        for (Customer cust : customers) {
            System.out.println(cust);
            System.out.println("-------------------------------------------------");
        }
    }
}













---------
package courseProject;

public class BankAcctApp {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

package courseProject;

import java.util.ArrayList;
import java.util.List;

public class BankAcctApp {
    public static void main(String[] args) {
        List<Customer> customers = new ArrayList<>();
        String continueEntry;
        
        System.out.println("Bank Account Application - Data Entry");

        do {
            Customer customer = new Customer();
            customer.setCustomerID(DataEntry.inputString("Enter Customer ID (Max 5 characters): ", 5));
            customer.setSSN(DataEntry.inputNumericString("Enter SSN (9 digits): ", 9));
            customer.setLastName(DataEntry.inputString("Enter Last Name (Max 20 characters): ", 20));
            customer.setFirstName(DataEntry.inputString("Enter First Name (Max 15 characters): ", 15));
            customer.setStreet(DataEntry.inputString("Enter Street (Max 20 characters): ", 20));
            customer.setCity(DataEntry.inputString("Enter City (Max 20 characters): ", 20));
            customer.setState(DataEntry.inputString("Enter State (2 characters): ", 2));
            customer.setZip(DataEntry.inputNumericString("Enter Zip Code (5 digits): ", 5));
            customer.setPhone(DataEntry.inputNumericString("Enter Phone Number (10 digits): ", 10));

            customers.add(customer);

            System.out.print("Do you want to enter another customer? (yes/no): ");
            continueEntry = new Scanner(System.in).nextLine();
        } while (continueEntry.equalsIgnoreCase("yes"));

        // Display all customers' information
        System.out.println("\nCustomer Information:");
        System.out.println("-------------------------------------------------");
        for (Customer cust : customers) {
            System.out.println(cust);
            System.out.println("-------------------------------------------------");
        }
    }
}



package courseProject;

public class Customer {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}


package courseProject;

public class Customer {
    // Data fields
    private String customerID;
    private String ssn;
    private String lastName;
    private String firstName;
    private String street;
    private String city;
    private String state;
    private String zip;
    private String phone;

    // Constructor
    public Customer() {}

    // Getter and Setter methods with validation
    public String getCustomerID() { return customerID; }
    public void setCustomerID(String customerID) { this.customerID = customerID; }

    public String getSSN() { return ssn; }
    public void setSSN(String ssn) { this.ssn = ssn; }

    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }

    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }

    public String getStreet() { return street; }
    public void setStreet(String street) { this.street = street; }

    public String getCity() { return city; }
    public void setCity(String city) { this.city = city; }

    public String getState() { return state; }
    public void setState(String state) { this.state = state; }

    public String getZip() { return zip; }
    public void setZip(String zip) { this.zip = zip; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    // toString method for formatted customer output
    @Override
    public String toString() {
        return String.format(
            "Customer ID: %s\nSSN: %s\nName: %s %s\nAddress: %s, %s, %s %s\nPhone: %s\n",
            customerID, ssn, firstName, lastName, street, city, state, zip, phone
        );
    }
}



package courseProject;

public class DataEntry {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}

package courseProject;

import java.util.Scanner;

public class DataEntry {
    private static Scanner scanner = new Scanner(System.in);

    // Method for string entry with no limit
    public static String inputString(String prompt) {
        System.out.print(prompt);
        return scanner.nextLine();
    }

    // Method for string entry with length limit
    public static String inputString(String prompt, int maxLength) {
        String input;
        do {
            System.out.print(prompt);
            input = scanner.nextLine();
        } while (input.isEmpty() || input.length() > maxLength);
        return input;
    }

    // Method for numeric string entry
    public static String inputNumericString(String prompt, int length) {
        String input;
        do {
            System.out.print(prompt);
            input = scanner.nextLine();
        } while (input.length() != length || !input.matches("\\d+"));
        return input;
    }
}

