package stackCalculator;

import java.util.Stack;

public class StackCalculator {
    // Data
    private Stack<Double> calculator = new Stack<>();
    private String command;

    // Methods
    public void displayWelcomeMessage() {
        System.out.println("Welcome to the Stack Calculator.");
    }

    public void displayCommands() {
        System.out.println("\nCommands: push n, add, sub, mult, div, list, clear, or quit.\n");
    }

    public void push(double value) {
        calculator.push(value);
        listStack();
    }

    public double pop() {
        if (!calculator.isEmpty()) {
            return calculator.pop();
        } else {
            System.out.println("Stack is empty.");
            return 0;
        }
    }

    public void listStack() {
        if (calculator.isEmpty()) {
            System.out.println("empty");
        } else {
            for (Double value : calculator) {
                System.out.println(value);
            }
        }
    }

    public void clearStack() {
        calculator.clear();
        System.out.println("empty");
    }

    public double add() {
        if (calculator.size() < 2) {
            System.out.println("Not enough elements to add.");
            return 0;
        }
        double b = pop();
        double a = pop();
        double result = a + b;
        push(result);
        return result;
    }

    public double sub() {
        if (calculator.size() < 2) {
            System.out.println("Not enough elements to subtract.");
            return 0;
        }
        double b = pop();
        double a = pop();
        double result = a - b;
        push(result);
        return result;
    }

    public double mult() {
        if (calculator.size() < 2) {
            System.out.println("Not enough elements to multiply.");
            return 0;
        }
        double b = pop();
        double a = pop();
        double result = a * b;
        push(result);
        return result;
    }

    public double div() {
        if (calculator.size() < 2) {
            System.out.println("Not enough elements to divide.");
            return 0;
        }
        double b = pop();
        double a = pop();
        if (b == 0) {
            System.out.println("Cannot divide by zero.");
            push(a);
            push(b);
            return 0;
        }
        double result = a / b;
        push(result);
        return result;
    }
}



package stackCalculator;

import java.util.Scanner;

public class StackCalculatorApp {
    public static void main(String[] args) {
        StackCalculator calculator = new StackCalculator();
        Scanner scanner = new Scanner(System.in);

        calculator.displayWelcomeMessage();
        calculator.displayCommands();

        boolean running = true;

        while (running) {
            System.out.print("\nstack> ");
            String input = scanner.nextLine();
            String[] parts = input.split(" ");
            String command = parts[0];

            try {
                switch (command) {
                    case "push":
                        if (parts.length > 1) {
                            double value = Double.parseDouble(parts[1]);
                            calculator.push(value);
                        } else {
                            System.out.println("Missing value for push command.");
                        }
                        break;
                    case "add":
                        calculator.add();
                        break;
                    case "sub":
                        calculator.sub();
                        break;
                    case "mult":
                        calculator.mult();
                        break;
                    case "div":
                        calculator.div();
                        break;
                    case "clear":
                        calculator.clearStack();
                        break;
                    case "list":
                        calculator.listStack();
                        break;
                    case "quit":
                        running = false;
                        System.out.println("\nThanks for using the Stack Calculator.");
                        break;
                    default:
                        System.out.println("Unrecognized command.");
                        break;
                }
            } catch (Exception e) {
                System.out.println("Error: Invalid input.");
            }
        }

        scanner.close();
    }
}
