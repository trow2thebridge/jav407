package courseProject;

import java.util.Date;

public abstract class Account {
    protected String accountNumber;
    protected String accountType;
    protected double serviceFee;
    protected double interestRate;
    protected double overdraftFee;
    protected double balance;

    public Account() {}

    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        if (accountNumber == null || accountNumber.length() > 5) {
            throw new IllegalArgumentException("Account number must be non-blank and max 5 characters.");
        }
        this.accountNumber = accountNumber;
    }

    public String getAccountType() {
        return accountType;
    }

    public void setAccountType(String accountType) {
        if (!"CHK".equalsIgnoreCase(accountType) && !"SAV".equalsIgnoreCase(accountType)) {
            throw new IllegalArgumentException("Account type must be 'CHK' or 'SAV'.");
        }
        this.accountType = accountType.toUpperCase();
    }

    public abstract void deposit(double amount, Date date);

    public abstract void withdrawal(double amount, Date date);

    public double getBalance() {
        return balance;
    }

    @Override
    public String toString() {
        return String.format(
            "Account Number: %s\nAccount Type: %s\nBalance: %.2f\n",
            accountNumber, accountType, balance
        );
    }
}


-------


package courseProject;

import java.util.Date;

public class CheckingAccount extends Account {
    private static final double SERVICE_FEE = 0.50;
    private static final double OVERDRAFT_FEE = 30.00;

    public CheckingAccount() {
        this.accountType = "CHK";
        this.serviceFee = SERVICE_FEE;
    }

    @Override
    public void deposit(double amount, Date date) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Deposit amount must be positive.");
        }
        balance += amount - SERVICE_FEE;
    }

    @Override
    public void withdrawal(double amount, Date date) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Withdrawal amount must be positive.");
        }
        if (balance - amount < 0) {
            balance -= (amount + OVERDRAFT_FEE);
        } else {
            balance -= amount + SERVICE_FEE;
        }
    }
}



------



package courseProject;

import java.util.Date;

public class SavingsAccount extends Account {
    private static final double SERVICE_FEE = 0.25;

    public SavingsAccount() {
        this.accountType = "SAV";
        this.serviceFee = SERVICE_FEE;
    }

    @Override
    public void deposit(double amount, Date date) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Deposit amount must be positive.");
        }
        balance += amount - SERVICE_FEE;
    }

    @Override
    public void withdrawal(double amount, Date date) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Withdrawal amount must be positive.");
        }
        if (balance - amount < 0) {
            throw new IllegalArgumentException("Savings account balance cannot be negative.");
        }
        balance -= amount + SERVICE_FEE;
    }
}


----


package courseProject;

import java.util.*;

public class BankAcctApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Account> accounts = new ArrayList<>();

        // Add Customers and Accounts
        CheckingAccount checkingAccount = new CheckingAccount();
        checkingAccount.setAccountNumber("12345");
        checkingAccount.deposit(1000, new Date());
        accounts.add(checkingAccount);

        SavingsAccount savingsAccount = new SavingsAccount();
        savingsAccount.setAccountNumber("67890");
        savingsAccount.deposit(1000, new Date());
        accounts.add(savingsAccount);

        // Test Transactions
        try {
            checkingAccount.withdrawal(500, new Date());
            checkingAccount.withdrawal(501, new Date());
            checkingAccount.deposit(500, new Date());
            System.out.printf("Checking Account Final Balance: %.2f\n", checkingAccount.getBalance());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

        try {
            savingsAccount.withdrawal(500, new Date());
            savingsAccount.withdrawal(501, new Date()); // Should throw an exception
            savingsAccount.deposit(500, new Date());
            System.out.printf("Savings Account Final Balance: %.2f\n", savingsAccount.getBalance());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}



------



package courseProject;

import java.util.*;

public class CLIApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Account> accounts = new ArrayList<>();

        // Add Initial Accounts
        CheckingAccount checkingAccount = new CheckingAccount();
        checkingAccount.setAccountNumber("12345");
        checkingAccount.deposit(1000, new Date());
        accounts.add(checkingAccount);

        SavingsAccount savingsAccount = new SavingsAccount();
        savingsAccount.setAccountNumber("67890");
        savingsAccount.deposit(1000, new Date());
        accounts.add(savingsAccount);

        // Menu Loop
        while (true) {
            System.out.println("\nBank Account Application");
            System.out.println("1. Deposit");
            System.out.println("2. Withdraw");
            System.out.println("3. View Balance");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1 -> {
                    System.out.print("Enter Account Number: ");
                    String accNum = scanner.next();
                    System.out.print("Enter Deposit Amount: ");
                    double depositAmount = scanner.nextDouble();
                    for (Account acc : accounts) {
                        if (acc.getAccountNumber().equals(accNum)) {
                            acc.deposit(depositAmount, new Date());
                            System.out.println("Deposit successful.");
                        }
                    }
                }
                case 2 -> {
                    System.out.print("Enter Account Number: ");
                    String accNum = scanner.next();
                    System.out.print("Enter Withdrawal Amount: ");
                    double withdrawalAmount = scanner.nextDouble();
                    for (Account acc : accounts) {
                        if (acc.getAccountNumber().equals(accNum)) {
                            acc.withdrawal(withdrawalAmount, new Date());
                            System.out.println("Withdrawal successful.");
                        }
                    }
                }
                case 3 -> {
                    System.out.print("Enter Account Number: ");
                    String accNum = scanner.next();
                    for (Account acc : accounts) {
                        if (acc.getAccountNumber().equals(accNum)) {
                            System.out.println(acc);
                        }
                    }
                }
                case 4 -> {
                    System.out.println("Exiting application...");
                    return;
                }
                default -> System.out.println("Invalid option. Please try again.");
            }
        }
    }
}

Checking Account Final Balance: 467.50
Savings account balance cannot be negative.



package courseProject;

import java.text.SimpleDateFormat;
import java.util.*;

public class BankAcctApp {
    public static void main(String[] args) {
        // Date formatter for output
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        // Create Checking and Savings Accounts
        CheckingAccount checkingAccount = new CheckingAccount();
        checkingAccount.setAccountNumber("12345");
        checkingAccount.deposit(1000, new Date());
        SavingsAccount savingsAccount = new SavingsAccount();
        savingsAccount.setAccountNumber("67890");
        savingsAccount.deposit(1000, new Date());

        // Perform Transactions and Log Details
        performTransaction(checkingAccount, "Deposit", 1000, dateFormat);
        performTransaction(checkingAccount, "Withdraw", 500, dateFormat);
        performTransaction(checkingAccount, "Withdraw", 501, dateFormat);
        performTransaction(checkingAccount, "Deposit", 500, dateFormat);
        addInterest(checkingAccount, dateFormat);

        performTransaction(savingsAccount, "Deposit", 1000, dateFormat);
        performTransaction(savingsAccount, "Withdraw", 500, dateFormat);
        performTransaction(savingsAccount, "Withdraw", 501, dateFormat);
        performTransaction(savingsAccount, "Deposit", 500, dateFormat);
        addInterest(savingsAccount, dateFormat);

        System.out.println("\n--- Final Account Balances ---");
        System.out.println(checkingAccount);
        System.out.println(savingsAccount);
    }

    private static void performTransaction(Account account, String transactionType, double amount, SimpleDateFormat dateFormat) {
        try {
            Date transactionDate = new Date();
            if ("Deposit".equalsIgnoreCase(transactionType)) {
                account.deposit(amount, transactionDate);
                System.out.printf(
                        "Transaction Successful: %s\nCustomer ID: %s | Account Number: %s | Type: %s | Date: %s | Amount: %.2f | Service Fee: %.2f | New Balance: %.2f\n\n",
                        transactionType, "N/A", account.getAccountNumber(), account.getAccountType(),
                        dateFormat.format(transactionDate), amount, account.serviceFee, account.getBalance());
            } else if ("Withdraw".equalsIgnoreCase(transactionType)) {
                account.withdrawal(amount, transactionDate);
                System.out.printf(
                        "Transaction Successful: %s\nCustomer ID: %s | Account Number: %s | Type: %s | Date: %s | Amount: %.2f | Service Fee: %.2f | New Balance: %.2f\n\n",
                        transactionType, "N/A", account.getAccountNumber(), account.getAccountType(),
                        dateFormat.format(transactionDate), amount, account.serviceFee, account.getBalance());
            }
        } catch (IllegalArgumentException e) {
            System.out.printf(
                    "Transaction Failed: %s\nCustomer ID: %s | Account Number: %s | Type: %s | Reason: %s\n\n",
                    transactionType, "N/A", account.getAccountNumber(), account.getAccountType(), e.getMessage());
        }
    }

    private static void addInterest(Account account, SimpleDateFormat dateFormat) {
        try {
            double interestRate = account.interestRate / 100.0;
            double interestEarned = account.getBalance() * interestRate;
            account.deposit(interestEarned, new Date());
            System.out.printf(
                    "Interest Added\nCustomer ID: %s | Account Number: %s | Type: %s | Interest Rate: %.2f%% | Interest Earned: %.2f | New Balance: %.2f\n\n",
                    "N/A", account.getAccountNumber(), account.getAccountType(), account.interestRate, interestEarned,
                    account.getBalance());
        } catch (IllegalArgumentException e) {
            System.out.printf(
                    "Interest Calculation Failed\nCustomer ID: %s | Account Number: %s | Type: %s | Reason: %s\n\n",
                    "N/A", account.getAccountNumber(), account.getAccountType(), e.getMessage());
        }
    }
}


